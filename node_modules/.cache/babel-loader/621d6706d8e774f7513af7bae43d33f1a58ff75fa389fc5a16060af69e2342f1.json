{"ast":null,"code":"// import React, { useState, useRef, useEffect } from 'react';\n// import {\n//   Input,\n//   Button,\n//   Card,\n//   List,\n//   Avatar,\n//   Select,\n//   Divider,\n//   Spin,\n//   message,\n//   Form // 添加Form导入\n// } from 'antd';\n// import { UserOutlined, RobotOutlined } from '@ant-design/icons';\n// import { streamChat } from '../services/api';\n//\n// const { TextArea } = Input;\n// const { Option } = Select;\n// const { Item } = Form; // 获取Form.Item的快捷方式\n//\n// const LearningChat = ({ showNotification }) => {\n//   const [messages, setMessages] = useState([]);\n//   const [inputValue, setInputValue] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [contextLevel, setContextLevel] = useState('level1');\n//   const [contextId, setContextId] = useState(null);\n//   const messagesEndRef = useRef(null);\n//   const [form] = Form.useForm(); // 初始化表单实例\n//\n//   const handleSendMessage = async () => {\n//     if (!inputValue.trim()) return;\n//\n//     const userMessage = {\n//       content: inputValue,\n//       sender: 'user',\n//       timestamp: new Date().toISOString()\n//     };\n//\n//     setMessages([...messages, userMessage]);\n//     setInputValue('');\n//     setLoading(true);\n//\n//     try {\n//       // 添加临时消息占位\n//       setMessages(prev => [...prev, {\n//         content: '...',\n//         sender: 'bot',\n//         timestamp: new Date().toISOString(),\n//         isStreaming: true\n//       }]);\n//\n//       // 这里需要根据实际的streamChat实现调整\n//       const response = await streamChat(inputValue, contextLevel, contextId);\n//\n//       // 假设streamChat返回完整响应（实际可能是流式）\n//       setMessages(prev => {\n//         const last = prev[prev.length - 1];\n//         if (last.isStreaming) {\n//           return [...prev.slice(0, -1), {\n//             ...last,\n//             content: response.content || response,\n//             isStreaming: false\n//           }];\n//         }\n//         return prev;\n//       });\n//     } catch (error) {\n//       showNotification('error', '发送失败', error.message);\n//       setMessages(prev => [...prev, {\n//         content: '抱歉，与AI导师通信时出错',\n//         sender: 'bot',\n//         timestamp: new Date().toISOString(),\n//         isError: true\n//       }]);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//\n//   return (\n//     <div style={{ maxWidth: 800, margin: '0 auto' }}>\n//       <Card\n//         title=\"AI学习导师\"\n//         extra={\n//           <Select\n//             defaultValue=\"level1\"\n//             style={{ width: 120 }}\n//             onChange={setContextLevel}\n//           >\n//             <Option value=\"level1\">Level 1 上下文</Option>\n//             <Option value=\"level2\">Level 2 上下文</Option>\n//           </Select>\n//         }\n//       >\n//         <div style={{ height: 500, overflowY: 'auto', marginBottom: 16 }}>\n//           <List\n//             dataSource={messages}\n//             renderItem={(item) => (\n//               // 修改消息气泡样式\n//               <List.Item style={{\n//                 padding: '8px 0',\n//                 justifyContent: item.sender === 'user' ? 'flex-end' : 'flex-start'\n//               }}>\n//                 <div style={{\n//                   display: 'flex',\n//                   flexDirection: item.sender === 'user' ? 'row-reverse' : 'row',\n//                   alignItems: 'flex-start',\n//                   gap: 12\n//                 }}>\n//                   <Avatar\n//                     icon={item.sender === 'user' ? <UserOutlined /> : <RobotOutlined />}\n//                     style={{\n//                       backgroundColor: item.sender === 'user' ? '#2a97ff' : '#00b4b4',\n//                       boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'\n//                     }}\n//                   />\n//                   <div style={{\n//                     maxWidth: '70%',\n//                     background: item.sender === 'user'\n//                       ? 'linear-gradient(135deg, #2a97ff, #0066cc)'\n//                       : 'linear-gradient(135deg, #00b4b4, #008080)',\n//                     color: 'white',\n//                     padding: '12px 16px',\n//                     borderRadius: item.sender === 'user' ? '18px 4px 18px 18px' : '4px 18px 18px 18px',\n//                     boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',\n//                     transition: 'all 0.3s'\n//                   }}>\n//                     {item.content}\n//                   </div>\n//                 </div>\n//               </List.Item>\n//             )}\n//           />\n//           <div ref={messagesEndRef} />\n//           {loading && (\n//             <div style={{ textAlign: 'center', padding: 12 }}>\n//               <Spin tip=\"AI导师正在思考...\" />\n//             </div>\n//           )}\n//         </div>\n//\n//         <Form form={form} layout=\"vertical\">\n//           <Item label=\"上下文ID\" name=\"contextId\" style={{ marginBottom: 8 }}>\n//             <Input\n//               placeholder=\"输入知识图谱ID (可选)\"\n//               onChange={(e) => setContextId(e.target.value || null)}\n//             />\n//           </Item>\n//           <Item>\n//             <div style={{ display: 'flex', gap: 8 }}>\n//               <TextArea\n//                 value={inputValue}\n//                 onChange={(e) => setInputValue(e.target.value)}\n//                 placeholder=\"输入您的问题...\"\n//                 autoSize={{ minRows: 2, maxRows: 6 }}\n//                 onPressEnter={(e) => {\n//                   if (!e.shiftKey) {\n//                     e.preventDefault();\n//                     handleSendMessage();\n//                   }\n//                 }}\n//               />\n//               <Button\n//                 type=\"primary\"\n//                 onClick={handleSendMessage}\n//                 style={{ height: 'auto' }}\n//                 loading={loading}\n//                 disabled={loading}\n//               >\n//                 发送\n//               </Button>\n//             </div>\n//           </Item>\n//         </Form>\n//\n//         <Divider />\n//\n//       </Card>\n//     </div>\n//   );\n// };\n//\n// export default LearningChat;","map":{"version":3,"names":[],"sources":["G:/Python/ALPSF/src/components/LearningChat.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\r\n// import {\r\n//   Input,\r\n//   Button,\r\n//   Card,\r\n//   List,\r\n//   Avatar,\r\n//   Select,\r\n//   Divider,\r\n//   Spin,\r\n//   message,\r\n//   Form // 添加Form导入\r\n// } from 'antd';\r\n// import { UserOutlined, RobotOutlined } from '@ant-design/icons';\r\n// import { streamChat } from '../services/api';\r\n//\r\n// const { TextArea } = Input;\r\n// const { Option } = Select;\r\n// const { Item } = Form; // 获取Form.Item的快捷方式\r\n//\r\n// const LearningChat = ({ showNotification }) => {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [inputValue, setInputValue] = useState('');\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [contextLevel, setContextLevel] = useState('level1');\r\n//   const [contextId, setContextId] = useState(null);\r\n//   const messagesEndRef = useRef(null);\r\n//   const [form] = Form.useForm(); // 初始化表单实例\r\n//\r\n//   const handleSendMessage = async () => {\r\n//     if (!inputValue.trim()) return;\r\n//\r\n//     const userMessage = {\r\n//       content: inputValue,\r\n//       sender: 'user',\r\n//       timestamp: new Date().toISOString()\r\n//     };\r\n//\r\n//     setMessages([...messages, userMessage]);\r\n//     setInputValue('');\r\n//     setLoading(true);\r\n//\r\n//     try {\r\n//       // 添加临时消息占位\r\n//       setMessages(prev => [...prev, {\r\n//         content: '...',\r\n//         sender: 'bot',\r\n//         timestamp: new Date().toISOString(),\r\n//         isStreaming: true\r\n//       }]);\r\n//\r\n//       // 这里需要根据实际的streamChat实现调整\r\n//       const response = await streamChat(inputValue, contextLevel, contextId);\r\n//\r\n//       // 假设streamChat返回完整响应（实际可能是流式）\r\n//       setMessages(prev => {\r\n//         const last = prev[prev.length - 1];\r\n//         if (last.isStreaming) {\r\n//           return [...prev.slice(0, -1), {\r\n//             ...last,\r\n//             content: response.content || response,\r\n//             isStreaming: false\r\n//           }];\r\n//         }\r\n//         return prev;\r\n//       });\r\n//     } catch (error) {\r\n//       showNotification('error', '发送失败', error.message);\r\n//       setMessages(prev => [...prev, {\r\n//         content: '抱歉，与AI导师通信时出错',\r\n//         sender: 'bot',\r\n//         timestamp: new Date().toISOString(),\r\n//         isError: true\r\n//       }]);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n//\r\n//   return (\r\n//     <div style={{ maxWidth: 800, margin: '0 auto' }}>\r\n//       <Card\r\n//         title=\"AI学习导师\"\r\n//         extra={\r\n//           <Select\r\n//             defaultValue=\"level1\"\r\n//             style={{ width: 120 }}\r\n//             onChange={setContextLevel}\r\n//           >\r\n//             <Option value=\"level1\">Level 1 上下文</Option>\r\n//             <Option value=\"level2\">Level 2 上下文</Option>\r\n//           </Select>\r\n//         }\r\n//       >\r\n//         <div style={{ height: 500, overflowY: 'auto', marginBottom: 16 }}>\r\n//           <List\r\n//             dataSource={messages}\r\n//             renderItem={(item) => (\r\n//               // 修改消息气泡样式\r\n//               <List.Item style={{\r\n//                 padding: '8px 0',\r\n//                 justifyContent: item.sender === 'user' ? 'flex-end' : 'flex-start'\r\n//               }}>\r\n//                 <div style={{\r\n//                   display: 'flex',\r\n//                   flexDirection: item.sender === 'user' ? 'row-reverse' : 'row',\r\n//                   alignItems: 'flex-start',\r\n//                   gap: 12\r\n//                 }}>\r\n//                   <Avatar\r\n//                     icon={item.sender === 'user' ? <UserOutlined /> : <RobotOutlined />}\r\n//                     style={{\r\n//                       backgroundColor: item.sender === 'user' ? '#2a97ff' : '#00b4b4',\r\n//                       boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'\r\n//                     }}\r\n//                   />\r\n//                   <div style={{\r\n//                     maxWidth: '70%',\r\n//                     background: item.sender === 'user'\r\n//                       ? 'linear-gradient(135deg, #2a97ff, #0066cc)'\r\n//                       : 'linear-gradient(135deg, #00b4b4, #008080)',\r\n//                     color: 'white',\r\n//                     padding: '12px 16px',\r\n//                     borderRadius: item.sender === 'user' ? '18px 4px 18px 18px' : '4px 18px 18px 18px',\r\n//                     boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',\r\n//                     transition: 'all 0.3s'\r\n//                   }}>\r\n//                     {item.content}\r\n//                   </div>\r\n//                 </div>\r\n//               </List.Item>\r\n//             )}\r\n//           />\r\n//           <div ref={messagesEndRef} />\r\n//           {loading && (\r\n//             <div style={{ textAlign: 'center', padding: 12 }}>\r\n//               <Spin tip=\"AI导师正在思考...\" />\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//\r\n//         <Form form={form} layout=\"vertical\">\r\n//           <Item label=\"上下文ID\" name=\"contextId\" style={{ marginBottom: 8 }}>\r\n//             <Input\r\n//               placeholder=\"输入知识图谱ID (可选)\"\r\n//               onChange={(e) => setContextId(e.target.value || null)}\r\n//             />\r\n//           </Item>\r\n//           <Item>\r\n//             <div style={{ display: 'flex', gap: 8 }}>\r\n//               <TextArea\r\n//                 value={inputValue}\r\n//                 onChange={(e) => setInputValue(e.target.value)}\r\n//                 placeholder=\"输入您的问题...\"\r\n//                 autoSize={{ minRows: 2, maxRows: 6 }}\r\n//                 onPressEnter={(e) => {\r\n//                   if (!e.shiftKey) {\r\n//                     e.preventDefault();\r\n//                     handleSendMessage();\r\n//                   }\r\n//                 }}\r\n//               />\r\n//               <Button\r\n//                 type=\"primary\"\r\n//                 onClick={handleSendMessage}\r\n//                 style={{ height: 'auto' }}\r\n//                 loading={loading}\r\n//                 disabled={loading}\r\n//               >\r\n//                 发送\r\n//               </Button>\r\n//             </div>\r\n//           </Item>\r\n//         </Form>\r\n//\r\n//         <Divider />\r\n//\r\n//       </Card>\r\n//     </div>\r\n//   );\r\n// };\r\n//\r\n// export default LearningChat;\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}