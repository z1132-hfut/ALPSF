{"ast":null,"code":"var _jsxFileName = \"G:\\\\Python\\\\ALPSF\\\\src\\\\components\\\\GraphCreator.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Row, Col, Form, Input, Button, message, Alert, Spin, Card, Space, Typography, Divider } from 'antd';\nimport { createL1Graph, createL2Graph, pollTaskStatus } from '../services/api';\nimport { RocketOutlined, BookOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title,\n  Text\n} = Typography;\nconst GraphCreator = ({\n  addTask,\n  showNotification\n}) => {\n  _s();\n  const [l1Form] = Form.useForm();\n  const [l2Form] = Form.useForm();\n  const [l1Loading, setL1Loading] = useState(false);\n  const [l2Loading, setL2Loading] = useState(false);\n  const handleL1Submit = async values => {\n    setL1Loading(true);\n    try {\n      const response = await createL1Graph(values.keyword);\n      if (response.success) {\n        const task = {\n          task_id: response.task_id,\n          type: 'L1图谱创建',\n          keyword: values.keyword,\n          status: 'processing'\n        };\n        addTask(task);\n        const finalStatus = await pollTaskStatus(response.task_id);\n        updateTask(response.task_id, {\n          status: finalStatus.error ? 'failed' : 'completed',\n          message: finalStatus.error || '任务完成',\n          result: finalStatus.result\n        });\n        message.success({\n          content: 'L1图谱创建完成!',\n          icon: /*#__PURE__*/_jsxDEV(RocketOutlined, {\n            style: {\n              color: '#52c41a'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }, this)\n        });\n        l1Form.resetFields();\n      }\n    } catch (error) {\n      showNotification('error', '创建失败', '创建L1图谱时出错');\n    } finally {\n      setL1Loading(false);\n    }\n  };\n  const handleL2Submit = async values => {\n    setL2Loading(true);\n    try {\n      const response = await createL2Graph(values.keyword, values.parentId);\n      if (response.success) {\n        addTask({\n          task_id: response.task_id,\n          type: 'L2图谱创建',\n          keyword: values.keyword,\n          parent_id: values.parentId,\n          status: 'processing'\n        });\n        message.success({\n          content: 'L2图谱创建任务已启动!',\n          icon: /*#__PURE__*/_jsxDEV(RocketOutlined, {\n            style: {\n              color: '#52c41a'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this)\n        });\n        l2Form.resetFields();\n      } else {\n        showNotification('warning', '创建失败', response.message);\n      }\n    } catch (error) {\n      showNotification('error', '创建失败', '创建L2图谱时出错');\n    } finally {\n      setL2Loading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card\n  // title={\n  //   <Space>\n  //     <BookOutlined style={{ color: 'white' }} />\n  //     <Title level={4} style={{ margin: 0, color: 'white' }}>知识图谱创建</Title>\n  //   </Space>\n  // }\n  // headStyle={{\n  //   background: 'linear-gradient(90deg, #60a5fa, #36cffa)',\n  //   borderTopLeftRadius: 12,\n  //   borderTopRightRadius: 12\n  // }}\n  // style={{\n  //   borderRadius: 12,\n  //   boxShadow: '0 8px 32px rgba(24, 144, 255, 0.1)',\n  //   border: 'none',\n  // }}\n  , {\n    bodyStyle: {\n      padding: 24\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphCreator, \"XEg8/+zQYU5MN2Slk5cW3easzWc=\", false, function () {\n  return [Form.useForm, Form.useForm];\n});\n_c = GraphCreator;\nexport default GraphCreator;\nvar _c;\n$RefreshReg$(_c, \"GraphCreator\");","map":{"version":3,"names":["React","useState","Row","Col","Form","Input","Button","message","Alert","Spin","Card","Space","Typography","Divider","createL1Graph","createL2Graph","pollTaskStatus","RocketOutlined","BookOutlined","jsxDEV","_jsxDEV","Title","Text","GraphCreator","addTask","showNotification","_s","l1Form","useForm","l2Form","l1Loading","setL1Loading","l2Loading","setL2Loading","handleL1Submit","values","response","keyword","success","task","task_id","type","status","finalStatus","updateTask","error","result","content","icon","style","color","fileName","_jsxFileName","lineNumber","columnNumber","resetFields","handleL2Submit","parentId","parent_id","bodyStyle","padding","_c","$RefreshReg$"],"sources":["G:/Python/ALPSF/src/components/GraphCreator.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Row, Col, Form, Input, Button, message, Alert, Spin, Card, Space, Typography, Divider } from 'antd';\r\nimport { createL1Graph, createL2Graph, pollTaskStatus } from '../services/api';\r\nimport { RocketOutlined, BookOutlined } from '@ant-design/icons';\r\n\r\nconst { Title, Text } = Typography;\r\n\r\nconst GraphCreator = ({ addTask, showNotification }) => {\r\n  const [l1Form] = Form.useForm();\r\n  const [l2Form] = Form.useForm();\r\n  const [l1Loading, setL1Loading] = useState(false);\r\n  const [l2Loading, setL2Loading] = useState(false);\r\n\r\n  const handleL1Submit = async (values) => {\r\n    setL1Loading(true);\r\n    try {\r\n      const response = await createL1Graph(values.keyword);\r\n      if (response.success) {\r\n        const task = {\r\n          task_id: response.task_id,\r\n          type: 'L1图谱创建',\r\n          keyword: values.keyword,\r\n          status: 'processing'\r\n        };\r\n        addTask(task);\r\n\r\n        const finalStatus = await pollTaskStatus(response.task_id);\r\n        updateTask(response.task_id, {\r\n          status: finalStatus.error ? 'failed' : 'completed',\r\n          message: finalStatus.error || '任务完成',\r\n          result: finalStatus.result\r\n        });\r\n\r\n        message.success({\r\n          content: 'L1图谱创建完成!',\r\n          icon: <RocketOutlined style={{ color: '#52c41a' }} />,\r\n        });\r\n        l1Form.resetFields();\r\n      }\r\n    } catch (error) {\r\n      showNotification('error', '创建失败', '创建L1图谱时出错');\r\n    } finally {\r\n      setL1Loading(false);\r\n    }\r\n  };\r\n\r\n  const handleL2Submit = async (values) => {\r\n    setL2Loading(true);\r\n    try {\r\n      const response = await createL2Graph(values.keyword, values.parentId);\r\n      if (response.success) {\r\n        addTask({\r\n          task_id: response.task_id,\r\n          type: 'L2图谱创建',\r\n          keyword: values.keyword,\r\n          parent_id: values.parentId,\r\n          status: 'processing'\r\n        });\r\n        message.success({\r\n          content: 'L2图谱创建任务已启动!',\r\n          icon: <RocketOutlined style={{ color: '#52c41a' }} />,\r\n        });\r\n        l2Form.resetFields();\r\n      } else {\r\n        showNotification('warning', '创建失败', response.message);\r\n      }\r\n    } catch (error) {\r\n      showNotification('error', '创建失败', '创建L2图谱时出错');\r\n    } finally {\r\n      setL2Loading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      // title={\r\n      //   <Space>\r\n      //     <BookOutlined style={{ color: 'white' }} />\r\n      //     <Title level={4} style={{ margin: 0, color: 'white' }}>知识图谱创建</Title>\r\n      //   </Space>\r\n      // }\r\n      // headStyle={{\r\n      //   background: 'linear-gradient(90deg, #60a5fa, #36cffa)',\r\n      //   borderTopLeftRadius: 12,\r\n      //   borderTopRightRadius: 12\r\n      // }}\r\n      // style={{\r\n      //   borderRadius: 12,\r\n      //   boxShadow: '0 8px 32px rgba(24, 144, 255, 0.1)',\r\n      //   border: 'none',\r\n      // }}\r\n      bodyStyle={{\r\n        padding: 24\r\n      }}\r\n    >\r\n      \r\n      {/*<Row gutter={24}>*/}\r\n      {/*  <Col span={12}>*/}\r\n      {/*    <Card*/}\r\n      {/*      title={*/}\r\n      {/*        <Space>*/}\r\n      {/*          <BookOutlined />*/}\r\n      {/*          <Text strong>创建L1图谱</Text>*/}\r\n      {/*        </Space>*/}\r\n      {/*      }*/}\r\n      {/*      bordered={false}*/}\r\n      {/*    >*/}\r\n      {/*      <Form*/}\r\n      {/*        form={l1Form}*/}\r\n      {/*        layout=\"vertical\"*/}\r\n      {/*        onFinish={handleL1Submit}*/}\r\n      {/*      >*/}\r\n      {/*        <Form.Item*/}\r\n      {/*          label={<Text strong style={{ color: '#3a5169' }}>学科/领域名称</Text>}*/}\r\n      {/*          name=\"keyword\"*/}\r\n      {/*          rules={[{ required: true, message: '请输入学科或领域名称' }]}*/}\r\n      {/*        >*/}\r\n      {/*          <Input*/}\r\n      {/*            placeholder=\"例如: Python编程, 机器学习\"*/}\r\n      {/*            size=\"large\"*/}\r\n      {/*            allowClear*/}\r\n      {/*          />*/}\r\n      {/*        </Form.Item>*/}\r\n\r\n      {/*        <Form.Item>*/}\r\n      {/*          <Button*/}\r\n      {/*            type=\"primary\"*/}\r\n      {/*            htmlType=\"submit\"*/}\r\n      {/*            loading={l1Loading}*/}\r\n      {/*            size=\"large\"*/}\r\n      {/*            style={{*/}\r\n      {/*              width: '100%',*/}\r\n      {/*              borderRadius: 8,*/}\r\n      {/*              padding: '12px 24px',*/}\r\n      {/*              height: 'auto',*/}\r\n      {/*              fontWeight: 500,*/}\r\n      {/*              background: 'linear-gradient(90deg, #1890ff, #36cffa)',*/}\r\n      {/*              border: 'none',*/}\r\n      {/*            }}*/}\r\n      {/*            icon={<RocketOutlined />}*/}\r\n      {/*          >*/}\r\n      {/*            {l1Loading ? '创建中...' : '创建L1图谱'}*/}\r\n      {/*          </Button>*/}\r\n      {/*        </Form.Item>*/}\r\n      {/*      </Form>*/}\r\n\r\n      {/*      <Alert*/}\r\n      {/*        message={<Text strong>L1图谱创建说明</Text>}*/}\r\n      {/*        description=\"L1图谱代表一个完整的学科或知识领域的学习大纲。创建过程可能需要一些时间，请耐心等待。\"*/}\r\n      {/*        type=\"info\"*/}\r\n      {/*        showIcon*/}\r\n      {/*        style={{*/}\r\n      {/*          marginTop: 24,*/}\r\n      {/*          borderRadius: 8,*/}\r\n      {/*          border: '1px solid #e6f7ff',*/}\r\n      {/*          backgroundColor: '#f6fbff'*/}\r\n      {/*        }}*/}\r\n      {/*      />*/}\r\n      {/*    </Card>*/}\r\n      {/*  </Col>*/}\r\n\r\n      {/*  <Divider type=\"vertical\" style={{ height: 'auto' }} />*/}\r\n\r\n      {/*  <Col span={12}>*/}\r\n      {/*    <Card*/}\r\n      {/*      title={*/}\r\n      {/*        <Space>*/}\r\n      {/*          <BookOutlined />*/}\r\n      {/*          <Text strong>创建L2图谱</Text>*/}\r\n      {/*        </Space>*/}\r\n      {/*      }*/}\r\n      {/*      bordered={false}*/}\r\n      {/*    >*/}\r\n      {/*      <Form*/}\r\n      {/*        form={l2Form}*/}\r\n      {/*        layout=\"vertical\"*/}\r\n      {/*        onFinish={handleL2Submit}*/}\r\n      {/*      >*/}\r\n      {/*        <Form.Item*/}\r\n      {/*          label={<Text strong style={{ color: '#3a5169' }}>所属L1图谱ID</Text>}*/}\r\n      {/*          name=\"parentId\"*/}\r\n      {/*          rules={[{ required: true, message: '请输入父级L1图谱ID' }]}*/}\r\n      {/*        >*/}\r\n      {/*          <Input*/}\r\n      {/*            placeholder=\"例如: e8a3b1c4-...\"*/}\r\n      {/*            size=\"large\"*/}\r\n      {/*            allowClear*/}\r\n      {/*          />*/}\r\n      {/*        </Form.Item>*/}\r\n\r\n      {/*        <Form.Item*/}\r\n      {/*          label={<Text strong style={{ color: '#3a5169' }}>具体知识点</Text>}*/}\r\n      {/*          name=\"keyword\"*/}\r\n      {/*          rules={[{ required: true, message: '请输入要展开的具体知识点' }]}*/}\r\n      {/*        >*/}\r\n      {/*          <Input*/}\r\n      {/*            placeholder=\"例如: Python数据结构, 神经网络\"*/}\r\n      {/*            size=\"large\"*/}\r\n      {/*            allowClear*/}\r\n      {/*          />*/}\r\n      {/*        </Form.Item>*/}\r\n\r\n      {/*        <Form.Item>*/}\r\n      {/*          <Button*/}\r\n      {/*            type=\"primary\"*/}\r\n      {/*            htmlType=\"submit\"*/}\r\n      {/*            loading={l2Loading}*/}\r\n      {/*            size=\"large\"*/}\r\n      {/*            style={{*/}\r\n      {/*              width: '100%',*/}\r\n      {/*              borderRadius: 8,*/}\r\n      {/*              padding: '12px 24px',*/}\r\n      {/*              height: 'auto',*/}\r\n      {/*              fontWeight: 500,*/}\r\n      {/*              background: 'linear-gradient(90deg, #1890ff, #36cffa)',*/}\r\n      {/*              border: 'none',*/}\r\n      {/*            }}*/}\r\n      {/*            icon={<RocketOutlined />}*/}\r\n      {/*          >*/}\r\n      {/*            {l2Loading ? '创建中...' : '创建L2图谱'}*/}\r\n      {/*          </Button>*/}\r\n      {/*        </Form.Item>*/}\r\n      {/*      </Form>*/}\r\n\r\n      {/*      <Alert*/}\r\n      {/*        message={<Text strong>L2图谱创建说明</Text>}*/}\r\n      {/*        description=\"L2图谱是L1中某个具体知识点的详细展开。请确保输入的L1图谱ID存在，且知识点属于该L1图谱的内容。\"*/}\r\n      {/*        type=\"info\"*/}\r\n      {/*        showIcon*/}\r\n      {/*        style={{*/}\r\n      {/*          marginTop: 24,*/}\r\n      {/*          borderRadius: 8,*/}\r\n      {/*          border: '1px solid #e6f7ff',*/}\r\n      {/*          backgroundColor: '#f6fbff'*/}\r\n      {/*        }}*/}\r\n      {/*      />*/}\r\n      {/*    </Card>*/}\r\n      {/*  </Col>*/}\r\n      {/*</Row>*/}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default GraphCreator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}